if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}
}
}
debugSource('~/Unibz/Dropbox/Thesis_Daniele/R/Scripts/Prova.R')
sequenceIterative
sequenceIterative
sequenceIterative
function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}else{break()}
}
}
sequenceIterative
sequenceIterative
function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}else{break()}
}
}
debugSource('~/Unibz/Dropbox/Thesis_Daniele/R/Scripts/Prova.R')
cat(sequenceIterative, " not theta probable ", "\n")
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}
}
provaMore <- function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}
}
}
provaMore <- function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}
}
}
provaMore <- function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}
}
}
provaMore <- function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}
}
}
provaMore <- function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}
}
}
debugSource('~/Unibz/Dropbox/Thesis_Daniele/R/Scripts/Prova.R')
sequenceIterative
sequenceIterative
sequenceIterative
debugSource('~/Unibz/Dropbox/Thesis_Daniele/R/Scripts/Prova.R')
i
sequenceIterative
i
sequenceIterative
i
sequenceIterative
i
sequenceIterative
i
i
temp
sequenceIterative
debugSource('~/Unibz/Dropbox/Thesis_Daniele/R/Scripts/Prova.R')
i
provaMore <- function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
print(sequenceIterative)
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}
}
}
for (j in 1:M) {
init <- symbols[j]
sequence <- c(init, symbols[1])
logForwardProb = forward(hmm, sequence)
forwardProbSum <- sum(exp(logForwardProb[, 1]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(init)
print(forwardProbSum)
sequence <- provaMore(init, N, M)
}
}
provaMore <- function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
init<-sequenceIterative
provaMore(init,sequenceLength,numberOfSymbols)
}
}
}
provaMore <- function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
init<-sequenceIterative
provaMore(init,sequenceLength,numberOfSymbols)
}
}
}
for (j in 1:M) {
init <- symbols[j]
sequence <- c(init, symbols[1])
logForwardProb = forward(hmm, sequence)
forwardProbSum <- sum(exp(logForwardProb[, 1]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(init)
print(forwardProbSum)
sequence <- provaMore(init, N, M)
}
}
provaMore <- function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
init<-sequenceIterative
provaMore(init,sequenceLength,numberOfSymbols)
}else{print("out")}
}
}
for (j in 1:M) {
init <- symbols[j]
sequence <- c(init, symbols[1])
logForwardProb = forward(hmm, sequence)
forwardProbSum <- sum(exp(logForwardProb[, 1]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(init)
print(forwardProbSum)
sequence <- provaMore(init, N, M)
}
}
provaMore <- function(init, sequenceLength, numberOfSymbols) {
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}else{print("out")
sequenceIterative<-init}
}
}
for (j in 1:M) {
init <- symbols[j]
sequence <- c(init, symbols[1])
logForwardProb = forward(hmm, sequence)
forwardProbSum <- sum(exp(logForwardProb[, 1]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(init)
print(forwardProbSum)
sequence <- provaMore(init, N, M)
}
}
init
provaMore <- function(init, sequenceLength, numberOfSymbols) {
newInit<-init
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}else{print("out")
sequenceIterative<-newInit}
}
}
for (j in 1:M) {
init <- symbols[j]
sequence <- c(init, symbols[1])
logForwardProb = forward(hmm, sequence)
forwardProbSum <- sum(exp(logForwardProb[, 1]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(init)
print(forwardProbSum)
sequence <- provaMore(init, N, M)
}
}
provaMore <- function(init, sequenceLength, numberOfSymbols) {
newInit<-init
sequenceIterative <- init
for (i in 1:numberOfSymbols) {
sequenceIterative <- c(sequenceIterative, symbols[i])
temp <- length(sequenceIterative)
if(temp<sequenceLength + 1){
logForwardProb = forward(hmm, sequenceIterative)
forwardProbSum <- sum(exp(logForwardProb[, temp]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(sequenceIterative)
print(forwardProbSum)
} else{
cat(sequenceIterative, " not theta probable ", "\n")
}
provaMore(sequenceIterative,sequenceLength,numberOfSymbols)
}else{print("out")
sequenceIterative<-newInit}
}
}
for (j in 1:M) {
init <- symbols[j]
sequence <- c(init, symbols[1])
logForwardProb = forward(hmm, sequence)
forwardProbSum <- sum(exp(logForwardProb[, 1]))
if (forwardProbSum > 2 / K) {
#save it. TODO
print(init)
print(forwardProbSum)
sequence <- provaMore(init, N, M)
}
}
library(plotly)
install.packages("plotly")
library(plotly)
crime <- read.csv("http://datasets.flowingdata.com/crimeRatesByState2005.tsv", header=TRUE, sep="\t")
symbols(crime$murder, crime$burglary, circles=crime$population)
radius <- sqrt( crime$population/ pi )
symbols(crime$murder, crime$burglary, circles=radius)
symbols(crime$murder, crime$burglary, circles=radius, inches=0.35, fg="white", bg="red", xlab="Murder Rate", ylab="Burglary Rate")
text(crime$murder, crime$burglary, crime$state, cex=0.5)
/Users/barbaramini/OneDrive - Scientific Network South Tyrol/Marta/Paper/References/BubblePlotAlvesEtAl2014.csv
crime <- read.csv("/Users/barbaramini/OneDrive - Scientific Network South Tyrol/Marta/Paper/References/BubblePlotAlvesEtAl2014.csv", header=TRUE, sep="\t")
crime
crime <- read.csv("/Users/barbaramini/OneDrive - Scientific Network South Tyrol/Marta/Paper/References/BubblePlotAlvesEtAl2014.csv", header=TRUE, sep=",")
crime
crime <- read.csv("/Users/barbaramini/OneDrive - Scientific Network South Tyrol/Marta/Paper/References/BubblePlotAlvesEtAl2014.csv", header=TRUE, sep=",")
symbols(crime$murder, crime$burglary, circles=crime$population)
radius <- sqrt( crime$population/ pi )
crime
library(ggplot2)
ggplot()
install.packages("ggplot2")
library(ggplot2)
require(ggplot2)
install.packages("ggplot2")
require(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
require(ggplot2)
install.packages("enexprs")
setRepositories()
setRepositories()
require(ggplot2)
install.packages("enexprs")
install.packages("enexprs")
available.packages()
available.packages(ggplot2)
available.packages()
View(available.packages())
library(ggplot2)
install.packages(enexprs)
install.packages("enexprs")
repos <- getOption('repos')
repos["CRAN"] <- "http://cran.rstudio.org"
option(repos = repos)
install.packages('UsingR')
veriosn
version
library(ggplot2)
install.packages("rLang")
library(ggplot2)
repos <- getOption('repos')
repos["CRAN"] <- "http://cran.rstudio.org"
option(repos = repos)
install.packages('UsingR')
paste("https://dumps.wikimedia.org/other/pagecounts-raw/",
sprintf("%04d/", year), sprintf("%04d-%02d", year, month),
sprintf("/projectcounts-%04d%02d%02d-%02d0000", year, month, day, hour),
sep = "")
?sprintf
install.packages("ggplot2")
require(ggplot2)
library(ggplot2)
crime <- read.csv("/Users/barbaramini/OneDrive - Scientific Network South Tyrol/Marta/Paper/References/BubblePlotAlvesEtAl2014.csv", header=TRUE, sep=",")
symbols(crime$TD.Type, crime$burglary, circles=crime$population)
ggplot()
radius <- sqrt( crime$population/ pi )
symbols(crime$murder, crime$burglary, circles=radius)
symbols(crime$murder, crime$burglary, circles=radius, inches=0.35, fg="white", bg="red", xlab="Murder Rate", ylab="Burglary Rate")
text(crime$murder, crime$burglary, crime$state, cex=0.5)
crime
#Compute the mass for each load and each configuration
computeRelativeMass<-function(threshold, avg, mixTemp){
#Check pass/fail for each service. the "mix" value is 0 if fail and mixTemp if pass. Compute the relative mass for each configuration
passCriteria<-avg
relativeMass<-c()
mix<-as.data.frame(matrix(nrow=nrow(usedSettings), ncol=ncol(mixTemp)))
for(j in 1:nrow(passCriteria)){
mix[j,]<-mixTemp[j,]
for(i in 6:(5+noMicroServices)){
if(passCriteria[j,i]>threshold[i]){mix[j,i]<-0}
}
relativeMass[j]<-sum(mix[j,6:(5+noMicroServices)])
}
return(relativeMass)
}
shiny::runApp('Research/Dropbox/OverleafGit/Microservices/SingleExperimentAnalysis/PPTAM_EXT')
shiny::runApp('Research/Dropbox/OverleafGit/Microservices/SingleExperimentAnalysis/PPTAM_EXT')
